# There should be a job in the workflow that runs the tests Linting and testing should be done in parallel.
# There should be a job that builds the application using docker.

name: Backend Continuous Integration
on:
  pull_request:
    branches:
      - main
    paths:
      - "starter/backend/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Run Lint
        run: pipenv run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Run Test
        run: pipenv run test

  build:
    name: Build Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Build Application
        run: docker build --tag mp-backend:latest . # && docker run -p 5000:5000 --name mp-backend -d mp-backend
