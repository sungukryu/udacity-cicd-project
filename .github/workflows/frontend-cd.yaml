name: Frontend Continuous Deployment
on:
  push:
    branches:
      - main
    paths:
      - "starter/frontend/**"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  NODE_VERSION: "18.14"
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  WORKING_DIR: "starter/frontend"

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Lint
        run: npm run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "${{ env.WORKING_DIR }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Test
        run: npm run test

  build_and_deploy:
    name: Build and Deploy Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/setup/k8s"
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} --tag=$REPOSITORY:$IMAGE_TAG . && docker images
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Setup kubectl
        run: aws eks update-kubeconfig --name cluster --region ${{ env.AWS_REGION }}

      - name: Deploy the application using kubectl
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
