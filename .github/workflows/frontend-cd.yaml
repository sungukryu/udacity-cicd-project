# This step should also utilize build-args to ensure the application is built
# with an environment variable REACT_APP_MOVIE_API_URL
# There should be a step that pushes the docker image to ECR in the AWS account.
# There should be a step that deploys the application using kubectl to the eks cluster
# The pipeline should be running without errors with all tests passing
# and no output failures from any of the steps

name: Frontend Continuous Deployment
on:
  push:
    branches:
      - main
    paths:
      - "starter/frontend/**"
  workflow_dispatch:

env:
  NODE_VERSION: "18.14"
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/frontend"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Lint
        run: npm run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/frontend"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Test
        run: npm run test

  build:
    name: Build Job
    runs-on: ubuntu-latest
    # environment:
    # name: "AWS"
    defaults:
      run:
        working-directory: "starter/frontend"
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Application
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest . # && docker run --name mp-frontend -p 3000:3000 -d mp-frontend]

  deploy:
    name: Deploy Job
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: "AWS"
    defaults:
      run:
        working-directory: "starter/frontend"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=${{ env.REACT_APP_MOVIE_API_URL }} --tag=frontend:latest .
          docker push 327107511345.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      #     If deploying to a Kubernetes cluster:
      #     Push the image to ECR
      #     Apply the Kubernetes manfiests using the image tag from build
      - name: Run Test
        run: npm run test
