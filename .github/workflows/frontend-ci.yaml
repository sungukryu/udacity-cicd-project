name: Frontend Continuous Integration
on:
  pull_request:
    branches:
      - main
    paths:
      - "starter/frontend/**"
  workflow_dispatch:

env:
  NODE_VERSION: "18.14"

jobs:
  lint:
    # Runs a linting job that fails if the code doesn't adhere to eslint rules
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: "npm"
          # cache-dependency-path: "**/package-lock.json"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: npm ci

      - name: Run Lint
        # run: npm run lint
        run: FAIL_LINT=true npm run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: "npm"
          # cache-dependency-path: "**/package-lock.json"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: npm ci

      - name: Run Test
        run: npm run test

  build:
    name: Build Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    needs: [lint, test]

    # The job should have these steps:
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: "npm"
          # cache-dependency-path: "**/package-lock.json"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: npm ci

      - name: Build Application
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest . # && docker run --name mp-frontend -p 3000:3000 -d mp-frontend]
