# A Continuous Deployment workflow that:
#     The built docker image should be tagged with the git sha
#     Runs a deploy job that applies the Kubernetes manifests to the provided cluster.
#     The manifest should deploy the newly created tagged image
#
#     ⚠️ NOTE Once you begin work on Continuous Deployment,
#       you'll need to first setup the AWS and Kubernetes environment.
#       Follow the next set of instructions when you're ready to start testing your deployments.

# Build a Continuous Deployment pipeline for the backend application using Github Actions.
# The pipeline should be configured to meet the team's needs, fulfilling the requirements of linting,
#  testing, building and deploying of the application on every merge to the main branch.

#     Accomplishes the following tasks:
#     Run after tests succeed
#     Tag the built docker image with the git sha (use GitHub Context)
#     If deploying to a Kubernetes cluster:
#     Push the image to ECR
#     Apply the Kubernetes manfiests using the image tag from build

# There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR.
# (using 3rd party actions)
# The ECR login step should also be accessing Github Secrets for credentials. (secure approach)
# There should be a step that pushes the docker image to ECR in the AWS account.
# There should be a step that deploys the application using kubectl to the kubernetes cluster
# The pipeline should be executed automatically on merges to the main branch
# The pipeline should be able to be run manually for verification purposes
# The pipeline should be running without errors with all tests passing
# and no output failures from any of the steps
# If there are AWS credentials anywhere in any of the pipelines = FAIL
# If any of the pipelines are failing to run or have failed steps = FAIL
# If any of the pipelines pass when there's a test failure = FAIL
# (will provide steps on how to simulate test failure)
# If the docker image doesn't get uploaded to ECR = FAIL
# If the application isn't successfully running on the cluster = FAIL

name: Backend Continuous Deployment
on:
  pull_request:
    branches:
      - main
    paths:
      - "starter/backend/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pipenv"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install flake8

      - name: Run Lint
        run: pipenv run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pipenv"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Run Test
        run: pipenv run test

  build:
    name: Build Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "starter/backend"
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pipenv"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Build Application
        run: docker build --tag mp-backend:latest . # && docker run -p 5000:5000 --name mp-backend -d mp-backend

  deploy:
    name: Deploy Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    needs: [lint, test]

    # The job should have these steps:
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::432255178055:role/my-github-actions-role
          aws-region: us-east-1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pipenv"

      - name: Restore Cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: starter/backend
          key: ${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs['cache-hit'] != 'true'
        run: pip install pipenv && pipenv install

      - name: Build Application
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest . # && docker run --name mp-frontend -p 3000:3000 -d mp-frontend]

